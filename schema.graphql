interface DeviceIF {
    label: String!
    deviceType: String!
    id: String!
    homeId: String!
    lastStatusUpdate: String!
    updateState: String!
    firmwareVersion: String!
    availableFirmwareVersion: String!
    lowBat: String!
    routerModuleSupported: String!
    routerModuleEnabled: String!
    modelType: String!
    modelId: String!
    oem: String!
    manufacturerCode: String!
    serializedGlobalTradeItemNumber: String!
    #rssiDeviceValue: String!
    #dutyCycle: String!
    configPending: String!
    permanentlyReachable: String!
    liveUpdateState: String!
    functionalChannels: String!
    functionalChannelCount: String!
    deviceOverheated: String!
    deviceOverloaded: String!
    deviceUndervoltage: String!
    temperatureOutOfRange: String!
    coProFaulty: String!
    coProRestartNeeded: String!
    coProUpdateFailure: String!
}

type GenericDevice implements DeviceIF {
    label: String!
    deviceType: String!
    id: String!
    homeId: String!
    lastStatusUpdate: String!
    updateState: String!
    firmwareVersion: String!
    availableFirmwareVersion: String!
    lowBat: String!
    routerModuleSupported: String!
    routerModuleEnabled: String!
    modelType: String!
    modelId: String!
    oem: String!
    manufacturerCode: String!
    serializedGlobalTradeItemNumber: String!
    #rssiDeviceValue: String!
    #dutyCycle: String!
    configPending: String!
    permanentlyReachable: String!
    liveUpdateState: String!
    functionalChannels: String!
    functionalChannelCount: String!
    deviceOverheated: String!
    deviceOverloaded: String!
    deviceUndervoltage: String!
    temperatureOutOfRange: String!
    coProFaulty: String!
    coProRestartNeeded: String!
    coProUpdateFailure: String!

}


type ShutterContact implements DeviceIF {
    label: String!
    deviceType: String!
    id: String!
    homeId: String!
    lastStatusUpdate: String!
    updateState: String!
    firmwareVersion: String!
    availableFirmwareVersion: String!
    lowBat: String!
    routerModuleSupported: String!
    routerModuleEnabled: String!
    modelType: String!
    modelId: String!
    oem: String!
    manufacturerCode: String!
    serializedGlobalTradeItemNumber: String!
    #rssiDeviceValue: String!
    #dutyCycle: String!
    configPending: String!
    permanentlyReachable: String!
    liveUpdateState: String!
    functionalChannels: String!
    functionalChannelCount: String!
    deviceOverheated: String!
    deviceOverloaded: String!
    deviceUndervoltage: String!
    temperatureOutOfRange: String!
    coProFaulty: String!
    coProRestartNeeded: String!
    coProUpdateFailure: String!

    windowState: String!
}

type TemperatureHumiditySensorDisplay implements DeviceIF {
    label: String!
    deviceType: String!
    id: String!
    homeId: String!
    lastStatusUpdate: String!
    updateState: String!
    firmwareVersion: String!
    availableFirmwareVersion: String!
    lowBat: String!
    routerModuleSupported: String!
    routerModuleEnabled: String!
    modelType: String!
    modelId: String!
    oem: String!
    manufacturerCode: String!
    serializedGlobalTradeItemNumber: String!
    #rssiDeviceValue: String!
    #dutyCycle: String!
    configPending: String!
    permanentlyReachable: String!
    liveUpdateState: String!
    functionalChannels: String!
    functionalChannelCount: String!
    deviceOverheated: String!
    deviceOverloaded: String!
    deviceUndervoltage: String!
    temperatureOutOfRange: String!
    coProFaulty: String!
    coProRestartNeeded: String!
    coProUpdateFailure: String!

    temperatureOffset: Float!
    display: String!
    actualTemperature: Float!
    humidity: Float!
    setPointTemperature: Float!
}

type Query {
    genericdevices: [GenericDevice]!
    genericdevices_filtered (deviceType_filter: String!): [GenericDevice]!
    
    shuttercontacts: [ShutterContact]!
    shuttercontacts_filtered (label_filter: String!): [ShutterContact]!
    ths_displays: [TemperatureHumiditySensorDisplay]
    ths_displays_filtered (label_filter: String!): [TemperatureHumiditySensorDisplay]
}
